openapi: 3.0.3
info:
  title: Event Management
  description: API to manage Artist en Venue and Shows
  version: 1.0.0
servers:
  - url: 'http'
paths:
  /artist:
    post:
      tags:
        - Artist
      summary: Create a new artist
      description: Create a new artist in database
      operationId: createArtist
      security:
        - oAuth:
            - artist:create
      requestBody:
        description: Artist DTO that we need to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ArtistDTO'
      responses:
        201:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponses'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponses'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponses'
        409:
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponses'
    get:
      tags:
        - Artist
      summary: Fetch all artist
      description: Fetch all artist from database
      operationId: findArtistAll
      security:
        - oAuth:
            - artist:read
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
  /artist/name/{name}:
    get:
      tags:
        - Artist
      summary: Find Artist by name
      description: Find artist by name from database
      operationId: findArtistByName
      security:
        - oAuth:
            - artist:read
      parameters:
        - name: name
          in: path
          description: Artist name to be fetch
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponses'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponses'
  /artist/{id}:
    get:
      tags:
        - Artist
      summary: Find artist by id
      description: Find Artist by id from database
      operationId: findArtistById
      security:
        - oAuth:
            - artist:read
      parameters:
        - name: id
          in: path
          description: Artist id to be fetch
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        404:
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponses'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponses'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponses'
    put:
      tags:
        - Artist
      summary: Update artist buy id
      description: Update artist buy id
      operationId: UpdateArtistById
      security:
        - oAuth:
            - artist:update
      parameters:
        - name: id
          in: path
          description: Artist id to be updated
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Artist DTO that we need to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ArtistDTO'
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponses'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponses'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponses'

    delete:
      tags:
        - Artist
      summary: Delete artist by id
      description: Delete artist by id from database
      operationId: deleteById
      security:
        - oAuth:
            - artist:delete
      parameters:
        - name: id
          in: path
          description: Artist id to be deleted
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        404:
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponses'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponses'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponses'
  /venue:
    post:
      tags:
        - Venue
      summary: Create a new venue
      description: Create a new venue in database
      operationId: createVenue
      security:
        - oAuth:
            - venue:create
      requestBody:
        description: Venue DTO that we need to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VenueDTO'
      responses:
        201:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponses'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponses'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponses'
        409:
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponses'
  /venue/{id}:
    get:
      tags:
        - Venue
      summary: Find venue by id
      description: Find Venue by id from database
      operationId: findVenueById
      security:
        - oAuth:
            - venue:read
      parameters:
        - name: id
          in: path
          description: Venue id to be fetch
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        404:
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponses'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponses'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponses'


components:
  securitySchemes:
    oAuth:
      type: oauth2
      description: This API uses OAuth 2 with the Authorization Code grant flow.
      flows:
        authorizationCode:
          authorizationUrl: https://auth.oauth.lao-sarl.cm
          tokenUrl: https://token.oauth.lao-sarl.cm
          scopes:
            artist:create: Create Artist
  schemas:
    ArtistDTO:
      type: object
      required:
        - name
        - city
        - phone
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          pattern: ^(?!\s*$).+ #not accepting empty string
        city:
          type: string
          pattern: ^(?!\s*$).+ #not accepting empty string
        phone:
          type: string
          pattern: ^(?!\s*$).+ #not accepting empty string
        imageLink:
          type: string
        facebookLink:
          type: string
        websiteLink:
          type: string
        seekingVenue:
          type: boolean
        seekingDescription:
          type: string
    VenueDTO:
      type: object
      required:
        - name
        - city
        - phone
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          pattern: ^(?!\s*$).+ #not accepting empty string
        city:
          type: string
          pattern: ^(?!\s*$).+ #not accepting empty string
        phone:
          type: string
          pattern: ^(?!\s*$).+ #not accepting empty string
        imageLink:
          type: string
        facebookLink:
          type: string
        websiteLink:
          type: string
        seekingTalent:
          type: boolean
        seekingDescription:
          type: string
    BaseResponse:
      discriminator:
        propertyName: responseType
        mapping:
          errorResponse: '#/components/schemas/ErrorResponse'
          successResponse: '#/components/schemas/SuccessResponse'
      type: object
      required:
        - message
      properties:
        message:
          type: string
        responseType:
          type: string
    ErrorResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            field:
              type: string
    ErrorResponses:
      type: object
      required:
        - code
        - timestamp
        - path
        - errors
      properties:
        code:
          type: integer
        timestamp:
          type: string
          format: date-time
        path:
          type: string
        errorCode:
          type: string
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ErrorResponse'
    SuccessResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            success:
              type: boolean
            result:
              type: array
              items:
                type: object